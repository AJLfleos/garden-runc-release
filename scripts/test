#!/usr/bin/env bash
set -eo pipefail

: "${FLY_TARGET:=runtime-garden}"
export FLY_TARGET

ROOT_DIR_PATH=$(cd "$(dirname "$0")"/.. && pwd)
RED=1
GREEN=2
print_message() {
  message=$1
  colour=$2
  printf "\\r\\033[00;3%sm[%s]\\033[0m\\n" "$colour" "$message"
}

usage() {
  colour=$1
  print_message "Usage:" "$colour"
  print_message "test -a --- run all tests in parallel (tmux panes will autosplit)" "$colour"
  print_message "test -s --- run all tests in serial (very boring not advised)" "$colour"
}

go_vet_and_fmt() {
  cd "$ROOT_DIR_PATH"

  pushd src/guardian
    GOOS=linux go vet ./...
    go fmt ./...
  popd

  pushd src/garden
    GOOS=linux go vet ./...
    go fmt ./...
  popd
}

prepare_dependencies() {
  if [ -n "${TAR_OUT}" ] && [ -n "${IPTABLES_OUT}" ];then
    return
  fi
  export TAR_OUT=$(mktemp -d --suffix "-tar-out")
  echo "Compile tar for tests"
  echo 'yes' | ./scripts/remote-fly packages/tar/task.yml -o install-target="${TAR_OUT}"

  export PKG_CONFIG_OUT=$(mktemp -d --suffix "-pkg-config-out")
  echo "Compile pkg-config for tests"
  echo 'yes' | ./scripts/remote-fly packages/pkg-config/task.yml -o install-target="${PKG_CONFIG_OUT}"

  export IPTABLES_OUT=$(mktemp -d --suffix "-iptables-out")
  echo "Compile iptables for tests"
  echo 'yes' | ./scripts/remote-fly packages/iptables/task.yml -o install-target="${IPTABLES_OUT}" -i pkg-config-out="${PKG_CONFIG_OUT}"

  echo "-------"
  echo "export IPTABLES_OUT=${IPTABLES_OUT}"
  echo "export TAR_OUT=${TAR_OUT}"
  echo "-------"
  echo "Export these env variables and re-run the test"
  exit 0
}


run_tests_in_serial() {
  prepare_dependencies
  . "$ROOT_DIR_PATH/scripts/remote-fly-tasks.bash"
  go_vet_and_fmt
  eval "$run_garden"
  eval "$run_guardian"
  eval "$run_guardian_windows"
  eval "$run_guardian_containerd"
  eval "$run_guardian_nerdful"
  eval "$run_guardian_throttled"
  eval "$run_guardian_standalone"
}

run_tests_in_parallel() {
  prepare_dependencies
  . "$ROOT_DIR_PATH/scripts/remote-fly-tasks.bash"
  print_message "about to run tests in parallel, it will be awesome" $GREEN
  print_message "ctrl-d panes when they are done" $RED
  ( go_vet_and_fmt )
  tmux new-window -n garden-runc-tests "$run_guardian_standalone"
  tmux split-window -h -p 75 "/bin/bash -c $run_garden"
  tmux split-window -h -p 66 "/bin/bash -c $run_guardian"
  tmux split-window -h -p 50 "/bin/bash -c $run_guardian_windows"
  tmux split-window -v -f -p 50 "CONTAINERD_ENABLED=true /bin/bash -c $run_guardian_containerd"
  tmux split-window -h -p 75 "CONTAINERD_ENABLED=true CPU_THROTTLING_ENABLED=true /bin/bash -c $run_guardian_throttled"
  tmux split-window -h -p 66 "CONTAINERD_ENABLED=true CONTAINERD_FOR_PROCESSES_ENABLED=true /bin/bash -c $run_guardian_nerdful"
}

if [ -z "$*" ]; then
  print_message "you are about to run tests in serial, are you sure you don't want to try the new exciting test option?" $RED
  print_message "ctrl-c this garbage and run './scripts/test -h' to find out more" $GREEN
  ( run_tests_in_serial )
fi

while getopts "ash" OPTION; do
  case $OPTION in
    a)
      run_tests_in_parallel
     exit
     ;;
    s)
      ( run_tests_in_serial )
    exit
    ;;
    h)
      usage $GREEN
    exit
    ;;
    *)
      usage $RED
    exit
    ;;
 esac
done
