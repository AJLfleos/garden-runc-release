. ./exiter.ps1

$ErrorActionPreference = "Stop";
trap { $host.SetShouldExit(1) }

$BOSH_INSTALL_TARGET = Resolve-Path "${env:BOSH_INSTALL_TARGET}"
if ((Get-Item $BOSH_INSTALL_TARGET).LinkType -ne "") {
  $BOSH_INSTALL_TARGET = (Get-Item $BOSH_INSTALL_TARGET).Target
}

$env:GOROOT="C:\var\vcap\packages\golang-windows\go"
$env:GOPATH="C:\Windows\Temp\gopath"
$env:GOCACHE="C:\Windows\Temp\gocache"
$env:PATH="${env:GOROOT}\bin;${env:PATH}"
$gdn_version = [IO.File]::ReadAllText("versions\guardian")

# Create GOPATH
New-Item -ItemType "directory" -Force "${BOSH_INSTALL_TARGET}\src"

robocopy.exe /E "${PWD}" "${BOSH_INSTALL_TARGET}\src"
if ($LASTEXITCODE -ge 8) {
    Write-Error "robocopy.exe /E ${PWD} ${BOSH_INSTALL_TARGET}\src"
}

cd .\code.cloudfoundry.org\guardian

go.exe build -mod vendor -o "${BOSH_INSTALL_TARGET}\gdn.exe" -ldflags "-X main.version=${gdn_version}" ".\cmd\gdn"
if ($LASTEXITCODE -ne 0) {
    Write-Error "Error compiling: cmd\gdn"
}

go.exe build -mod vendor -o "${BOSH_INSTALL_TARGET}\winit.exe" ".\cmd\winit"
if ($LASTEXITCODE -ne 0) {
    Write-Error "Error compiling: cmd\winit"
}

# Cleanup build artifacts
New-Item -ItemType directory -Path ".\emptydirectory" -Force

robocopy.exe ".\emptydirectory" "${BOSH_INSTALL_TARGET}\src" /PURGE
if ($LASTEXITCODE -ge 8) {
    Write-Error "robocopy.exe .\emptydirectory ${BOSH_INSTALL_TARGET}\src /PURGE"
}

Remove-Item -Recurse -Path "${BOSH_INSTALL_TARGET}\src" -Force
Remove-Item -Recurse -Path ".\emptydirectory" -Force

Exit 0
