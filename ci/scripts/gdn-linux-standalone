#!/usr/bin/env bash

set -ex

release=$PWD/release
binary=$PWD/binary

# This is work around --buildvcs issues in Go 1.18+
git config --global --add safe.directory '*'

# shellcheck source=../helpers/gats-utils
source "$release/ci/helpers/gats-utils"

function build() {

  # shellcheck source=../../src/build/runc.bash
  source "$release/src/build/runc.bash"

  gdn_version=$(cd $release/src/guardian && git rev-parse HEAD)
  ldflags="-X main.version=${gdn_version} -extldflags=-static"


  LINUX_ASSETS=$PWD/linux

  rm -rf "$LINUX_ASSETS"
  mkdir -p "${LINUX_ASSETS}/sbin"
  mkdir -p "${LINUX_ASSETS}/bin"

  cp tar-out/tar "${LINUX_ASSETS}/bin/tar"

  # go-bindata does weird stuff with symlinks. we only care about iptables anyway
  cp -aL iptables-out/sbin/iptables "${LINUX_ASSETS}/sbin/iptables"
  cp -aL iptables-out/sbin/iptables-restore "${LINUX_ASSETS}/sbin/iptables-restore"

  pushd $release
  # workaround 'mv /root/.tmp/... /tmp/...: invalid cross-device link'
  HOME=$PWD bosh sync-blobs

  ( 
    (
      cd src/guardian
      go build -mod vendor -o "${LINUX_ASSETS}/bin/dadoo" ./cmd/dadoo
    )

    (
      # Using patch instead of `git apply` to keep this path working with `fly
      # execute`, which does not preserve the `.git` dir.
      cd "${release}/src/gopath/src/github.com/opencontainers/runc"
      patch <"${release}/ci/runc-patches/0001-remove-delete-timeout.patch"
    )
    build_runc "$PWD" "${LINUX_ASSETS}/bin"

    pushd src/guardian/rundmc/nstar
    make
    mv nstar "${LINUX_ASSETS}/bin"
    popd

    pushd src/guardian/cmd/init
    gcc -static -o init init.c ignore_sigchild.c
    mv init "${LINUX_ASSETS}/bin"
    popd


    (
      cd src/grootfs
      make
      make prefix="${LINUX_ASSETS}/bin" install
    )
  )
  popd

  go install github.com/go-bindata/go-bindata/go-bindata@latest
  go-bindata -nomemcopy -pkg bindata -o $release/src/guardian/bindata/bindata.go linux/...

  (
    cd $release/src/guardian

    # must be built with 'daemon' flag because of docker packages :|
    CGO_ENABLED=0 go build \
      -mod vendor \
      -tags daemon \
      -o "${binary}/gdn" \
      -ldflags "$ldflags" \
      ./cmd/gdn

    GOARCH=arm64 CGO_ENABLED=0 go build \
      -mod vendor \
      -tags daemon \
      -o "${binary}/gdn-arm64" \
      -ldflags "$ldflags" \
      ./cmd/gdn
  )
}

function prepare() {
  # shellcheck source=../helpers/device-control
  source "$release/ci/helpers/device-control"

  permit_device_control
  create_loop_devices 256

  mkdir -p /opt/grootfs
  write_groot_config_file

  mkdir -p /var/lib/grootfs

  ${binary}/gdn \
    server \
    --depot="${tmpdir}/depot" \
    --bind-ip=0.0.0.0 \
    --bind-port=7777 \
    --debug-bind-ip=0.0.0.0 \
    --debug-bind-port=17013 \
    --network-pool=10.254.1.0/24 \
    --log-level="error" \
    --image-plugin-extra-arg=--config \
    --image-plugin-extra-arg=/opt/grootfs/grootfs.yml \
    --privileged-image-plugin-extra-arg=--config \
    --privileged-image-plugin-extra-arg=/opt/grootfs/grootfs-privileged.yml \
    --default-rootfs=/opt/warden/rootfs.tar &

  wait_for_gdn_server
}

function test() {
  cd $release/src/garden-integration-tests
  export ROOTLESS=false
  export CONTAINERD_FOR_PROCESSES_ENABLED=false

  go install github.com/onsi/ginkgo/ginkgo@latest
  ginkgo -mod vendor -p -nodes=8 -failOnPending -randomizeSuites -randomizeAllSpecs $*
}

function verify() {
  export tmpdir=/tmp/dir
  export GARDEN_ADDRESS
  GARDEN_ADDRESS="$(hostname)"
  export GARDEN_PORT=7777
  export GARDEN_DEBUG_PORT=17013
  export NESTED=true

  prepare
  test "$*"
}
