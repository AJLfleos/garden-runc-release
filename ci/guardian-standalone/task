#!/usr/bin/env bash

set -euxo pipefail

release=$PWD/release
binary=$PWD/binary

export BINARIES=$PWD/linux

# This is work around --buildvcs issues in Go 1.18+
git config --global --add safe.directory '*'

function build() {

  # shellcheck source=../helpers/build-binaries.bash
  source "$release/ci/helpers/build-binaries.bash"

  rm -rf "$BINARIES"
  mkdir -p "${BINARIES}/sbin"
  mkdir -p "${BINARIES}/bin"

  cp tar-out/tar "${BINARIES}/bin/tar"

  # go-bindata does weird stuff with symlinks. we only care about iptables anyway
  cp -aL iptables-out/sbin/iptables "${BINARIES}/sbin/iptables"
  cp -aL iptables-out/sbin/iptables-restore "${BINARIES}/sbin/iptables-restore"

  pushd $release
  # workaround 'mv /root/.tmp/... /tmp/...: invalid cross-device link'
  HOME=$PWD bosh sync-blobs

  local musl="$(mktemp -d --suffix '-musl')"
  build_musl "$PWD" "${musl}"

  build_runc "$PWD" "${BINARIES}/bin"
  build_dadoo "$PWD" "${BINARIES}/bin"
  WITH_MUSL="${musl}/bin/musl-gcc" build_nstar "$PWD" "${BINARIES}/bin"
  WITH_MUSL="${musl}/bin/musl-gcc" build_init "$PWD" "${BINARIES}/bin"
  WITH_MUSL="${musl}/bin/musl-gcc" build_grootfs "$PWD" "${BINARIES}/bin"
  build_idmapper_binaries "$PWD" "${BINARIES}/bin"
  popd

  go install github.com/go-bindata/go-bindata/go-bindata@latest
  go-bindata -nomemcopy -pkg bindata -o $release/src/guardian/bindata/bindata.go linux/...

  (
    cd $release/src/guardian
    gdn_version=$(git rev-parse HEAD)
    ldflags="-X main.version=${gdn_version} -extldflags=-static"

    # must be built with 'daemon' flag because of docker packages :|
    CGO_ENABLED=0 go build \
      -tags daemon \
      -o "${binary}/gdn" \
      -ldflags "$ldflags" \
      ./cmd/gdn

    GOARCH=arm64 CGO_ENABLED=0 go build \
      -tags daemon \
      -o "${binary}/gdn-arm64" \
      -ldflags "$ldflags" \
      ./cmd/gdn
  )
}

function write_groot_config_file() {
  cat <<EOF > /opt/grootfs/grootfs.yml
---
store: /var/lib/grootfs/store
tardis_bin: ${BINARIES}/bin/tardis
newuidmap_bin: ${BINARIES}/bin/newuidmap
newgidmap_bin: ${BINARIES}/bin/newgidmap
log_level: $LOG_LEVEL

create:
  with_clean: false
  without_mount: false

init:
  store_size_bytes: 51398832128
EOF

  cat <<EOF > /opt/grootfs/grootfs-privileged.yml
---
store: /var/lib/grootfs/store-privileged
tardis_bin: ${BINARIES}/bin/tardis
newuidmap_bin: ${BINARIES}/bin/newuidmap
newgidmap_bin: ${BINARIES}/bin/newgidmap
log_level: $LOG_LEVEL

create:
  with_clean: false
  without_mount: false

init:
  store_size_bytes: 51398832128
EOF
}

function wait_for_gdn_server() {
  for i in {1..5}; do
    curl "${GARDEN_ADDRESS}:${GARDEN_PORT}/ping" && break || sleep 5
  done
}


function prepare() {
  # shellcheck source=../helpers/device-control.bash
  source "$release/ci/helpers/device-control.bash"

  permit_device_control
  create_loop_devices 256

  mkdir -p /opt/grootfs
  write_groot_config_file

  mkdir -p /var/lib/grootfs

  ${binary}/gdn \
    server \
    --depot="${tmpdir}/depot" \
    --bind-ip=0.0.0.0 \
    --bind-port=7777 \
    --debug-bind-ip=0.0.0.0 \
    --debug-bind-port=17013 \
    --network-pool=10.254.1.0/24 \
    --log-level="${LOG_LEVEL}" \
    --image-plugin-extra-arg=--config \
    --image-plugin-extra-arg=/opt/grootfs/grootfs.yml \
    --privileged-image-plugin-extra-arg=--config \
    --privileged-image-plugin-extra-arg=/opt/grootfs/grootfs-privileged.yml \
    --default-rootfs=/opt/warden/rootfs.tar &

  wait_for_gdn_server
}

function test() {
  cd $release/src/garden-integration-tests
  export ROOTLESS=false
  export CONTAINERD_FOR_PROCESSES_ENABLED=false

  ginkgo -p -nodes=8 -failOnPending -randomizeSuites -randomizeAllSpecs $*
}

function verify() {
  export tmpdir=/tmp/dir
  export GARDEN_ADDRESS
  GARDEN_ADDRESS="$(hostname)"
  export GARDEN_PORT=7777
  export GARDEN_DEBUG_PORT=17013
  export NESTED=true
  export LOG_LEVEL=error

  prepare
  test "$*"
}

build
verify
